<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns="https://jakarta.ee/xml/ns/persistence"
             version="3.1">
<!--    영속성 유닛 (일반적으로 연결할 데이터베이스당 하나의 영속성 유닛을 등록)-->
    <persistence-unit name="happykoo">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <class>net.happykoo.jpa.ch2_3.entity.Member</class>
        <class>net.happykoo.jpa.ch4.entity.Member</class>
        <class>net.happykoo.jpa.ch4.entity.Board</class>
        <class>net.happykoo.jpa.ch5.entity.Member</class>
        <class>net.happykoo.jpa.ch5.entity.Team</class>
        <class>net.happykoo.jpa.ch6.entity.Member</class>
        <class>net.happykoo.jpa.ch6.entity.Team</class>
        <class>net.happykoo.jpa.ch6.entity.Locker</class>
        <class>net.happykoo.jpa.ch6.entity.Product</class>
        <class>net.happykoo.jpa.ch6.entity.Company</class>
        <class>net.happykoo.jpa.ch6.entity.Contract</class>
        <class>net.happykoo.jpa.ch7.entity.Book</class>
        <class>net.happykoo.jpa.ch7.entity.Goods</class>
        <class>net.happykoo.jpa.ch7.entity.Food</class>
        <class>net.happykoo.jpa.ch7.entity.Chicken</class>

<!--        <class>net.happykoo.jpa.example.entity.User</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Order</class>-->
<!--        <class>net.happykoo.jpa.example.entity.OrderItem</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Item</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Category</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Delivery</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Album</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Book</class>-->
<!--        <class>net.happykoo.jpa.example.entity.Movie</class>-->

        <properties>
            <property name="jakarta.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:tcp://localhost:9092/~/test"/>
            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password" value=""/>

            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

<!--        create: 애플리케이션 실행 시점에 데이터베이스 테이블 자동 생성 (개발용)  -->
<!--        update: 애플리케이션 실행 시점에 변경된 엔티티 기반으로 데이터베이스 테이블 자동 수정 (개발용) -->
<!--        validate: 일치 여부만 검증  -->
<!--        운영 서버에서는 validate 나 none 사용-->
            <property name="hibernate.hbm2ddl.auto" value="create" />

<!--        6.x 버전부터 제거 ID 생성 전략은 @GeneratedValue(strategy = GenerationType.IDENTITY) 같은 표준 JPA 방식 사용하면 됨-->
<!--        <property name="hibernate.id.new_generator_mappings" value="true"/>-->

<!--        카멜 케이스를 스네이크 케이스로 변환 -->
<!--        6.x 버전에선 deprecated-->
<!--        <property name="hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy"/>-->
            <property name="hibernate.physical_naming_strategy" value="org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy"/>
        </properties>
    </persistence-unit>
</persistence>
